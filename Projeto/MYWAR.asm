TITLE BATALHANAVAL
.MODEL SMALL
.STACK 100H
PUSHT MACRO
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH SI
    PUSH DI
ENDM
POPT MACRO
    POP DI
    POP SI
    POP DX
    POP CX
    POP BX
    POP AX
ENDM
STRING MACRO S
    PUSHT
    MOV AH,09H          ; Função para imprimir uma string
    LEA DX,S         ; Carrega o endereço da mensagem
    INT 21H             ; Chama interrupção para imprimir
    POPT
ENDM                    
BREAK MACRO         
    PUSH AX
    PUSH DX             
    MOV AH,02           ; Função para imprimir um caractere
    MOV DL,10           ; Caractere de nova linha
    INT 21H
    POP DX             ; Chama interrupção para imprimir
    POP AX             
ENDM                     
ESPACE MACRO             
    PUSH AX
    PUSH DX  
    MOV AH,02           ; Função para imprimir um caractere
    MOV DL,32           ; Caractere de espaço
    INT 21H             ; Chama interrupção para imprimir
    POP DX             ; Chama interrupção para imprimir
    POP AX
ENDM
CLEAR MACRO ;macro para limpar a tela
    PUSH AX ;salva dados nos registradores
    MOV AH, 00h ;executa funçao
    MOV AL, 03h
    INT 10h
    POP AX
.DATA
    MSG1 DB "----BEM VINDO AO BATALHA NAVAL----$"
    MSG2 DB "VOCE TERA 50 TENTATIVAS DE ACERTAR AS 5 EMBARCACOES DO JOGO$"
    MSG3 DB "SENDO ELAS 1 FRAGATA (3 ESPACOS)$"
    MSG4 DB "1 ENCOURACADO (2 ESPACOS)$"
    MSG5 DB "2 SUBMARINOS (2 ESPACOS) E 2 HIDROAVIOES (4 ESPACOS)$"
    MSG6 DB "APERTE QUALQUER TECLA PARA COMECAR$"
    MSG7 DB "ESCOLHA UM TABULEIRO DE 1 A 3$"
    MSG8 DB "INVALIDO. TENTE NOVAMENTE!$"
    MSG9 DB "INDIQUE A COLUNA PARA O TIRO:  (1 A 10)$"
    MSG10 DB "INDIQUE A LINHA PARA O TIRO:  (A A J)(MAIUSCULA)$"
    MSG11 DB "ERRO. REINICIE O PROGRAMA.$"
    MSG12 DB "AGUA... TENTE NOVAMENTE.$"
    MSG13 DB "PARABENS!!! VOCE ACERTOU TODAS AS EMBARCAÇÕES$"
    MSG14 DB "ACABOU SUAS TENTATIVAS :/"
    MSG15 DB "TENTE NOVAMENTE$"
    MSG16 DB "JOGAR NOVAMENTE? (1= SIM   2=NAO)"
    MSG18 DB "PARABENS VOCE ACERTOU!"
    MSG17 DB "===============FIM==============$"
    MVERIFIC1 DB 0,0,0,0,1,1,1,0,0,0,0
              DB 0,0,0,1,1,0,0,0,0,1,0
              DB 0,0,0,0,0,0,0,0,0,1,1
              DB 0,0,0,1,1,0,0,0,0,1,0
              DB 0,0,0,0,0,0,0,0,0,0,0
              DB 0,0,1,0,0,0,0,1,1,1,1
              DB 0,0,1,1,0,0,0,0,0,0,0
              DB 0,0,1,0,0,0,0,0,0,0,0
              DB 0,0,0,0,0,0,0,0,0,0,0
              DB 0,0,0,0,0,0,0,0,0,0,0

    MVERIFIC2 DB 0,0,0,0,0,0,0,0,1,1
              DB 0,0,0,0,0,0,0,0,0,0
              DB 1,1,1,1,0,0,0,0,0,0
              DB 0,0,0,0,0,0,0,0,0,0
              DB 0,0,0,0,0,0,0,1,1,1
              DB 0,0,0,0,0,0,0,0,0,0
              DB 0,0,0,1,1,0,0,0,0,0
              DB 0,1,0,0,0,0,0,1,0,0
              DB 0,1,1,0,0,0,0,1,1,0
              DB 0,1,0,0,0,0,0,1,0,0

    MVERIFIC3 DB 0,0,0,0,0,0,0,0,0,0
              DB 0,0,0,0,0,0,0,0,0,0
              DB 0,0,1,1,0,1,1,0,0,0
              DB 0,0,0,0,1,0,0,0,0,0
              DB 0,0,0,0,1,1,0,1,1,1
              DB 0,0,0,0,1,0,0,0,0,0
              DB 0,0,0,0,0,0,0,1,0,0
              DB 0,0,1,1,1,1,0,1,1,0
              DB 0,0,0,0,0,0,0,1,0,0
              DB 0,0,0,0,0,0,0,0,0,0

    COLUNAS   DB '0','1','2','3','4','5','6','7','8','9'
    MATRIZP   DB 'A',254,254,254,254,254,254,254,254,254,254
              DB 'B',254,254,254,254,254,254,254,254,254,254
              DB 'C',254,254,254,254,254,254,254,254,254,254
              DB 'D',254,254,254,254,254,254,254,254,254,254
              DB 'E',254,254,254,254,254,254,254,254,254,254
              DB 'F',254,254,254,254,254,254,254,254,254,254
              DB 'G',254,254,254,254,254,254,254,254,254,254
              DB 'H',254,254,254,254,254,254,254,254,254,254
              DB 'I',254,254,254,254,254,254,254,254,254,254
              DB 'J',254,254,254,254,254,254,254,254,254,254
    
.CODE
MAIN PROC
    MOV AX,@DATA ;PERMITE ACESSO DAS INFO EM .DATA.
    MOV DS,AX

    ;XOR DX,DX ;ZERA DX QUE SERA USADO PARA SABER SE ACERTOU TODAS AS EMBARCAÇOES.
    ;MOV CX,50 ;CX CONTA 50, NUMERO DE CHANCES

    CLEAR ;LIMPA A TELA.
    STRING MSG1 ;IMPRIME MSG1.
    BREAK ;PULA LINHA.
    BREAK ;PULA LINHA.
    BREAK ;PULA LINHA.
    BREAK ;PULA LINHA.
    STRING MSG2 ;IMPRIME MSG2
    BREAK ;PULA LINHA.
    STRING MSG3 ;IMPRIME MSG3.
    BREAK ;PULA LINHA.
    STRING MSG4 ;IMPRIME MSG4.
    BREAK ;PULA LINHA.
    STRING MSG5 ;IMPRIME MSG4.
    BREAK ;PULA LINHA.
    BREAK ;PULA LINHA.
    BREAK ;PULA LINHA.
    STRING MSG6 ;IMPRIME MSG4.
    MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
    INT 21H ;LE O CARACTERE DIGITADO.
    CALL INICIO ;CHAMA O PROCEDIMENTO INICIO.
    CLEAR ;LIMPA A TELA.
    STRING MSG17 ;IMPRIME A MENSAGEM DE FIM DO JOGO.

    MOV AH,4Ch ;PREPARA PARA ENCERRAR O PROGRAMA.
    INT 21H ;ENCERRA O PROGRAMA.

MAIN ENDP ;FIM DO PROCEDIMENTO MAIN.
INICIO PROC ;INICIO DO PROCEDIMENTO INICIO.
    VOLTA: ;PONTO DE SALTO.
        CLEAR ;LIMPA A TELA.
        STRING MSG7 ;IMPRIME MSG7.
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE.
        CMP AL,49H ;COMPARA O CARACTERE COM '1'.
        JE ONE ;SE FOR IGUAL SALTA PARA ONE.
        CMP AL,50H ;COMPARA O CARACTERE COM '2'.
        JE TWO ;SE FOR IGUAL SALTA PARA TWO.
        CMP AL,51H ;COMPARA O CARACTERE COM '3'.
        JE THREE ;SE FOR IGUAL SALTA PARA THREE.
        JMP INVALIDO ;CASO NAO SEJA NENHUM DOS 3, SALTA PARA INVALIDO.

    INVALIDO: ;PONTO DE SALTO.
        STRING INVALIDO ;IMPRIME INVALIDO.
        STRING MSG6 ;IMPRIME MSG6.
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE.
        CLEAR ;LIMPA A TELA, PARA EVITAR POLUIÇÃO DE MENSAGENS.
        JMP VOLTA ;SALTA PARA VOLTA.

    ONE: ;PONTO DE SALTO.
        JMP PLAYONE ;SALTA PARA PLAYONE.

    TWO: ;PONTO DE SALTO.
        JMP PLAYTWO ;SALTA PARA PLAYTWO.

    THREE: ;PONTO DE SALTO.
        JMP PLAYTHREE ;SALTA PARA PLAYTHREE.

    PLAYONE: ;PONTO DE SALTO.
        XOR DX, DX ;ZERA DX CONTADOR DE ACERTOS.
        MOV DX,19 ;DX 19 QUE É O NUMERO DE ACERTOS PARA A VITORIA.
        MOV CX,50 ;CX 50 QUE É O NUMERO DE TENTATIVAS DO JOGADOR.
        CALL PRINTMATRIZ ;CHAMA O PROCEDIMENTO PRINTMATRIZ.
        BREAK ;PULA LINHA.
        BREAK ;PULA LINHA.
        XOR AX,AX ;ZERA AX.
        MOV AL,1 ;MOVEMOS 1 PARA AX PARA INDICARMOS QUE MATRIZ SERA COMPARADO O TIRO.
        CALL SHOT
        STRING MSG16
        XOR AX,AX
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE.
        CMP AL,1
        JE VOLTA

    PLAYTWO: ;PONTO DE SALTO.
        XOR DX, DX ;ZERA DX CONTADOR DE ACERTOS.
        MOV DX,19 ;DX 19 QUE É O NUMERO DE ACERTOS PARA A VITORIA.
        MOV CX,50 ;CX 50 QUE É O NUMERO DE TENTATIVAS DO JOGADOR.
        CALL PRINTMATRIZ ;CHAMA O PROCEDIMENTO PRINTMATRIZ.
        BREAK ;PULA LINHA.
        BREAK ;PULA LINHA.
        XOR AX,AX
        MOV AL,2
        CALL SHOT
        STRING MSG16
        XOR AX,AX
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE.
        CMP AL,1
        JE VOLTA

    PLAYTHREE: ;PONTO DE SALTO.
        XOR DX, DX ;ZERA DX CONTADOR DE ACERTOS.
        MOV DX,19 ;DX 19 QUE É O NUMERO DE ACERTOS PARA A VITORIA.
        MOV CX,50 ;CX 50 QUE É O NUMERO DE TENTATIVAS DO JOGADOR.
        CALL PRINTMATRIZ ;CHAMA O PROCEDIMENTO PRINTMATRIZ.
        BREAK ;PULA LINHA.
        BREAK ;PULA LINHA.
        XOR AX,AX
        MOV AL,3
        CALL SHOT
        STRING MSG16
        XOR AX,AX
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE.
        CMP AL,1
        JE VOLTA
    RET
INICIO ENDP
PRINTMATRIZ PROC ;INICIO DO PROCEDIMENTO.
        PUSH DX
        PUSH CX
    IMPRIME: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX APONTANDO PARA O INDICE.
        MOV CH,10 ;CH 10 PARA SABER SE IMPRIMIU TODO O CONTEUDO.
        LEA DL,COLUNAS[BX] ;APONTA PARA O COLUNAS EM DATA PARA IMPRIMIR NA TELA.
        INT 21H ;IMPRIME NA TELA.
        ESPACE
        INC BX ;INCREMENTA BX APONTANDO PARA O PROXIMO CONTEUDO.
        DEC CH ;DECREMENTA CH.
        LOOP IMPRIME ;SE CH NAO FOR ZERO CONTINUA O LOOP PRARA IMPRIME:.
        BREAK
        XOR BX,BX ;ZERA BX PARA INDICE DA NOVA MATRIZ.
        XOR CX,CX ;ZERA CX PARA ADICIONAR DOIS NOVOS CONTADORES.
        XOR SI,SI
        MOV CL,110 ;CL 110 PARA VERIFICAR SE TODO O CONTEUDO FOI IMPRESSO.
        MOV CH,11 ;CH 10 PARA VERIFICAR SE A LINHA TERMINOU.
    IMPRIME2:    
        LEA DL,MATRIZP[SI+BX] ;APONTA PARA MATRIZP EM DATA.
        INT 21H ;IMPRIME O PRIMEIRO CONTEUDO.
        ESPACE
        INC BX ;INCREMENTA BX APONTANDO PARA O PROXIMO CONTEUDO DA LINHA.
        DEC CL ;DECREMENTA CL.
        JZ SAIDA ;SE CL FOR IGUAL A ZERO, SALTA PARA SAIDA.
        DEC CH ;DECREMENTA CH.
        JZ NEXTLINE ;SE CH FOR IGUAL A ZERO, SALTA PARA NEXTLINE.
    NEXTLINE: ;PONTO DE SALTO.
        XOR CH,CH
        MOV CH,11 ;REINICIA O CONTADOR CH.
        ADD SI,BX ;ADICIONA O VALOR DE BX PARA SI FAZENDO SI APONTAR PARA A PROXIMA LINHA.
        INC SI ;PARA SI VALER 11.
        XOR BX,BX ;ZERA BX APONTANDO PARA O INICIO DA LINHA.
        BREAK ;PULA LINHA.
        JMP IMPRIME2 ;SALTA PARA IMPRIME
    SAIDA: ;PONTO DE SALTO.
        XOR AX,AX ;LIMPA REGITSTRADOR.
        XOR BX,BX ;LIMPA REGITSTRADOR.
        XOR CX,CX ;LIMPA REGITSTRADOR.
        XOR DL,DL ;LIMPA REGITSTRADOR.
        XOR SI,SI ;LIMPA REGITSTRADOR.
        POP CX ;RETOMA O CONTEUDO DOS REGISTRADORES SALVOS NA PILHA.
        POP DX
        RET ;RETORNA CHAMADA.
PRINTMATRIZ ENDP ;FIM DO PROCEDIMENTO.
SHOT PROC
        PUSH CX
        PUSH DX ;MACRO PRA SALVAR CONTEUDO DOS REGISTRADORES NA PILHA.
    REPETEPROC:
        CMP AL,1
        JE SHOTM1
        CMP AL,2
        JE SHOTM2
        CMP AL,3
        JE SHOTM3

    SHOTM1:
        BREAK
        STRING MSG9 ;IMPRIME MSG9.
        BREAK
        XOR AX,AX
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE DIGITADO.
        AND AL,0FH
        CALL COMPARECOLUMN
        CMP AL,111
        JE SHOTM1
    REPETPROC:
        PUSH AL 
        STRING MSG10 ;IMPRIME A MSG.
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE DIGITADO.
        MOV BL, AL ;MOVE AL PARA BL PARA LIBERAR AL.
        XOR AL,AL
        AND BL,0FH ;CONVERTE BL NA DE ACORDO COM A ASCII.
        CALL COMPAREQUEUE ;CHAMA O PROCEDIMENTO COMPAREQUEUE.
        CMP BL,111
        JE REPETPROC
        POP AL
        MOV AH,1
        CALL COMPAREANDUPDATE
        CMP DX,0
        JZ WIN
        CMP CX,0
        JZ FIMDEJOGO
        JMP REPETEPROC

    SHOTM2:
        BREAK
        STRING MSG9 ;IMPRIME MSG9.
        BREAK
        XOR AX,AX
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE DIGITADO.
        AND AL,0FH
        CALL COMPARECOLUMN
        CMP AL,111
        JE REPETEPROC
    REPETPROC2:
        STRING MSG10 ;IMPRIME A MSG.
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE DIGITADO.
        MOV BL, AL ;MOVE AL PARA BL PARA LIBERAR AL.
        AND BL,0FH ;CONVERTE BL NA DE ACORDO COM A ASCII.
        CALL COMPAREQUEUE ;CHAMA O PROCEDIMENTO COMPAREQUEUE.
        CMP BL,111
        JE REPETPROC2
        POPT
        CALL COMPAREANDUPDATE
        CMP DX,0
        JZ WIN
        CMP CX,0
        JZ FIMDEJOGO
        JMP REPETEPROC

    SHOTM3:
        BREAK
        STRING MSG9 ;IMPRIME MSG9.
        BREAK
        XOR AX,AX
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE DIGITADO.
        AND AL,0FH
        CALL COMPARECOLUMN
        CMP AL,111
        JE REPETEPROC
    REPETPROC3:
        STRING MSG10 ;IMPRIME A MSG.
        MOV AH,01H ;PREPARA PARA LER UM CARACTERE.
        INT 21H ;LE O CARACTERE DIGITADO.
        MOV BL, AL ;MOVE AL PARA BL PARA LIBERAR AL.
        AND BL,0FH ;CONVERTE BL NA DE ACORDO COM A ASCII.
        CALL COMPAREQUEUE ;CHAMA O PROCEDIMENTO COMPAREQUEUE.
        CMP BL,111
        JE REPETPROC3
        CALL COMPAREANDUPDATE
        CMP DX,0
        JZ WIN
        CMP CX,0
        JZ FIMDEJOGO
        JMP REPETEPROC    
    WIN:
        BREAK
        STRING MSG13
        JMP FIM
    FIMDEJOGO:
        BREAK
        STRING MSG14
        BREAK
        STRING
    FIM:
        RET

SHOT ENDP
COMPAREANDUPDATE PROC
        CMP AH,1
        JE VER1
        CMP AH,2
        JE VER2
        CMP AH,3
        JE VER3
    VER1:
        
        XOR AH,AH
        XOR SI,SI
        MOV SI, OFFSET MVERIFIC1 ; SI = endereço da matriz
        ADD SI, BL ; SI = endereço da linha
        ADD SI, AL ; SI = endereço da coluna

        ; Verificar se a posição escolhida foi acertada
        MOV AH, [SI] ; AL = valor na matriz
        CMP AH, 1 ; se AL = 1, então a posição foi acertada
        JE ACERTOU1 ; se a posição foi acertada, salta para ACERTOU
        JNE ERROU1

    VER2:
        XOR AH,AH
        XOR SI,SI
        MOV SI, OFFSET MVERIFIC2 ; SI = endereço da matriz
        ADD SI, BL ; SI = endereço da linha
        ADD SI, AL ; SI = endereço da coluna
        MOV AH, [SI] ; AL = valor na matriz
        CMP AH, 1 ; se AL = 1, então a posição foi acertada
        JE ACERTOU2 ; se a posição foi acertada, salta para ACERTOU
        JNE ERROU2

    VER3:
        XOR AH,AH
        XOR SI,SI
        MOV SI, OFFSET MVERIFIC3 ; SI = endereço da matriz
        ADD SI, BL ; SI = endereço da linha
        ADD SI, AL ; SI = endereço da coluna
        MOV AH, [SI] ; AL = valor na matriz
        CMP AH, 1 ; se AL = 1, então a posição foi acertada
        JE ACERTOU3 ; se a posição foi acertada, salta para ACERTOU
        JNE ERROU3

    ACERTOU1:
        ;CALL COMPARELINE
        XOR AL,AL
        MOV SI, OFFSET MATRIZP
        MOV AL, 'X' ; AL = novo valor
        MOV [SI], AL ; atualiza a posição na matriz
        POP DX
        POP CX
        DEC CX
        DEC DX
        XOR AX
        XOR BX
        XOR SI
        MOV AL,1
        BREAK
        STRING MSG17
        JMP VOLTAR

    ERROU1:
        XOR AL,AL
        MOV SI, OFFSET MATRIZP
        MOV AL, '~' ; AL = novo valor
        MOV [SI], AL ; restaura a posição original
        POP DX
        POP CX
        DEC CX
        XOR AX
        XOR BX
        XOR SI
        MOV AL,1
        BREAK
        STRING MSG18
        JMP VOLTAR

    ACERTOU2:
        ;CALL COMPARELINE
        XOR AL,AL
        MOV SI, OFFSET MATRIZP
        MOV AL, 'X' ; AL = novo valor
        MOV [SI], AL ; atualiza a posição na matriz
        POP DX
        POP CX
        DEC CX
        DEC DX
        XOR AX
        XOR BX
        XOR SI
        MOV AL,2
        BREAK
        STRING MSG17
        JMP VOLTAR

    ERROU2:
        XOR AL,AL
        MOV SI, OFFSET MATRIZP
        MOV AL, '~' ; AL = novo valor
        MOV [SI], AL ; restaura a posição original
        POP DX
        POP CX
        DEC CX
        XOR AX
        XOR BX
        XOR SI
        MOV AL,2
        BREAK
        STRING MSG18
        JMP VOLTAR

    ACERTOU3:
        ;CALL COMPARELINE
        XOR AL,AL
        MOV SI, OFFSET MATRIZP
        MOV AL, 'X' ; AL = novo valor
        MOV [SI], AL ; atualiza a posição na matriz
        POP DX
        POP CX
        DEC CX
        DEC DX
        XOR AX
        XOR BX
        XOR SI
        MOV AL,3
        BREAK
        STRING MSG17
        JMP VOLTAR
        
    ERROU3:
        XOR AL,AL
        MOV SI, OFFSET MATRIZP
        MOV AL, '~' ; AL = novo valor
        MOV [SI], AL ; restaura a posição original
        POP DX
        POP CX
        DEC CX
        XOR AX
        XOR BX
        XOR SI
        MOV AL,3
        BREAK
        STRING MSG18
        JMP VOLTAR
    VOLTAR:      

        RET

COMPAREANDUPDATE ENDP
COMPARECOLUMN PROC
        CMP AL,48H ;COMPARA BL COM '0'.
        JE IGUAL0 ;SE FOR IGUAL SALTA PARA IGUAL0.
        CMP AL,49H ;COMPARA BL COM '1'.
        JE IGUAL1 ;SE FOR IGUAL SALTA PARA IGUAL1.
        CMP AL,50H ;COMPARA BL COM '2'.
        JE IGUAL2 ;SE FOR IGUAL SALTA PARA IGUAL2.
        CMP AL,51H ;COMPARA BL COM '3'.
        JE IGUAL3 ;SE FOR IGUAL SALTA PARA IGUAL3.
        CMP AL,52H ;COMPARA BL COM '4'.
        JE IGUAL4 ;SE FOR IGUAL SALTA PARA IGUAL4.
        CMP AL,53H ;COMPARA BL COM '5'.
        JE IGUAL5 ;SE FOR IGUAL SALTA PARA IGUAL5.
        CMP AL,54H ;COMPARA BL COM '6'.
        JE IGUAL6 ;SE FOR IGUAL SALTA PARA IGUAL6.
        CMP AL,55H ;COMPARA BL COM '7'.
        JE IGUAL7 ;SE FOR IGUAL SALTA PARA IGUAL7.
        CMP AL,56H ;COMPARA BL COM '8'.
        JE IGUAL8 ;SE FOR IGUAL SALTA PARA IGUAL8.
        CMP AL,57H ;COMPARA BL COM '9'.
        JE IGUAL9 ;SE FOR IGUAL SALTA PARA IGUALJ9.
        JMP INVALID ;SE NAO FOR NENHUM DOS QUE ESTAO ACIMA, SALTA PARA INVALID.
    IGUAL0: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,1 ;MOV 1 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL1: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,2 ;MOV 12 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL2: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,3 ;MOV 23 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL3: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,4 ;MOV 34 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL4: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,5 ;MOV 45 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL5: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,6 ;MOV 56 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL6: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,7 ;MOV 67 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL7: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,8 ;MOV 78 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL8: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,9 ;MOV 89 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUAL9: ;PONTO DE SALTO.
        XOR AX,AX ;ZERA AX.
        MOV AL,10 ;MOV 100 PARA AL APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    INVALID: ;PONTO DE SALTO.
        STRING MSG8 ;SALTA PARA COMPAREND.
        XOR AX,AX ;ZERA AX.
        MOV AL,11 ;MOV 111 PARA AL PARA INDICAR ERRO.
    COMPAREND: ;PONTO DE SALTO.
        RET ;RETORNA PARA A CHAMADA.
COMPARECOLUMN ENDP
COMPAREQUEUE PROC ;INICIO DO PROCEDIMENTO.
        CMP BL,65H ;COMPARA BL COM 'A'.
        JE IGUALA ;SE FOR IGUAL SALTA PARA IGUALA.
        CMP BL,66H ;COMPARA BL COM 'B'.
        JE IGUALB ;SE FOR IGUAL SALTA PARA IGUALB.
        CMP BL,67H ;COMPARA BL COM 'C'.
        JE IGUALC ;SE FOR IGUAL SALTA PARA IGUALC.
        CMP BL,68H ;COMPARA BL COM 'D'.
        JE IGUALD ;SE FOR IGUAL SALTA PARA IGUALD.
        CMP BL,69H ;COMPARA BL COM 'E'.
        JE IGUALE ;SE FOR IGUAL SALTA PARA IGUALE.
        CMP BL,70H ;COMPARA BL COM 'F'.
        JE IGUALF ;SE FOR IGUAL SALTA PARA IGUALF.
        CMP BL,71H ;COMPARA BL COM 'G'.
        JE IGUALG ;SE FOR IGUAL SALTA PARA IGUALG.
        CMP BL,72H ;COMPARA BL COM 'H'.
        JE IGUALH ;SE FOR IGUAL SALTA PARA IGUALH.
        CMP BL,73H ;COMPARA BL COM 'I'.
        JE IGUALI ;SE FOR IGUAL SALTA PARA IGUALI.
        CMP BL,74H ;COMPARA BL COM 'J'.
        JE IGUALJ ;SE FOR IGUAL SALTA PARA IGUALJ.
        JMP INVALIDO ;SE NAO FOR NENHUM DOS QUE ESTAO ACIMA, SALTA PARA INVALIDO.
    IGUALA: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,1 ;MOV 1 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALB: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,12 ;MOV 12 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALC: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,23 ;MOV 23 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALD: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,34 ;MOV 34 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALE: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,45 ;MOV 45 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALF: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,56 ;MOV 56 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALG: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,67 ;MOV 67 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALH: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,78 ;MOV 78 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALI: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,89 ;MOV 89 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    IGUALI: ;PONTO DE SALTO.
        XOR BX,BX ;ZERA BX.
        MOV BL,100 ;MOV 100 PARA BX APONTANDO PARA A POSICAO DA LINHA.
        JMP COMPAREND ;SALTA PARA COMPAREND.
    INVALIDO: ;PONTO DE SALTO.
        STRING MSG8 ;SALTA PARA COMPAREND.
        XOR BX,BX ;ZERA BX.
        MOV BL,111 ;MOV 111 PARA BX PARA INDICAR ERRO.
    COMPAREND: ;PONTO DE SALTO.
        RET ;RETORNA PARA A CHAMADA.
COMPAREQUEUE ENDP ;FIM DO PROCEDIMENTO.